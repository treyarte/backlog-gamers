generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  email            String             @unique
  passwordHash     String?
  image            String?
  emailVerified    DateTime?          @db.Date
  createdAt        DateTime           @default(now()) @db.Date
  updatedAt        DateTime           @updatedAt @db.Date
  account          Account[]
  comments         Comment[]
  articleLikes     Like[]
  UserFeedSettings UserFeedSettings[]
}

model UserFeedSettings {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  userId          String @unique @db.ObjectId
  user            User   @relation(fields: [userId], references: [id])
  excludedSources Int[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Article {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt        DateTime  @db.Date
  updatedAt        DateTime  @db.Date
  articleDate      DateTime  @db.Date
  title            String
  url              String
  shortDescription String
  articleSite      Int
  slug             String
  imageUrl         String?
  content          String?
  shares           Int       @default(0)
  clicks           Int       @default(0)
  comments         Comment[]
  likes            Like[]

  @@map("articles")
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @db.Date
  articleId String   @db.ObjectId
  userId    String   @db.ObjectId
  article   Article? @relation(fields: [articleId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])

  @@map("comments")
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  articleId String   @db.ObjectId
  article   Article  @relation(fields: [articleId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, articleId])
  @@map("likes")
}

model ArticleSource {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  articleSite Int
  siteUrl     String
  logoSrc     String

  @@map("articleSources")
}
